print(txt)
}
for(x in 5:1){
for (y in x:1){
cat(x)
}
message("")
}
?cat
?message
for(i in 5:1){
for(j in 1:i){
print(i)
}
}
for(i in 5:1){
for(j in 1:i){
print(j)
}
}
for(i in 5:1){
for(j in 1:i){
print(i)
cat(i)
}
}
for(i in 5:1){
for(j in 1:i){
cat(i)
}
}
for(i in 5:1){
for(j in 1:i){
cat(i)
}
message("")
}
for(i in 1:5){
for(i in 5:i){
cat(i)
}
}
for(i in 1:5){
for(j in 5:i){
cat(i)
}
}
for(i in 1:5){
for(j in 5:i){
cat(i)
}
message("")
}
pattern = seq(5,1)
for (p in pattern) {
txt = toString(p)
while (p > 1) {
txt = gsub(" ", "", paste(txt, substring(txt, 1, 1)))
p = p - 1
}
print(txt)
}
tmp <- c()
for (i in 5:1){
for (j in 1:i){
tmp <- c(tmp, i)
}
print(tmp)
tmp <- c()
}
install.packages("dplyr")
library(dplyr)
?dplyr
browseVignettes(package = "dplyr")
?drop
detach("package:dplyr", unload = TRUE)
detach("package:dplyr")
library("dplyr")
detach("package:dplyr")
library("dplyr")
detach("package:dplyr")
knitr::opts_chunk$set(echo = TRUE)
seq(from= 1, to= 2, by= 0.5)
seq(from= 1, to= 2, by= 0.5)
knitr::opts_chunk$set(echo = TRUE)
typeof(v)
typeof(v)
v = int(10)
v <- 10
typeof(v)
c(10,20,30,40)
c(10,20,30,40)
v <-10
v <-10
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
```{r}
temperature[2]
temperature[2:3]
temperature[-2]
temperature[c(TRUE, TRUE, FALSE)]
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender
v <-10
v
blood <- factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood <- factor(c("O", "AB", "A"), levels = c("A", "B", "AB", "O"))
blood <- factor(c("O", "AB", "A"), levels = c("A", "B", "AB", "O"))
blood
symptoms <- factor(c("SEVERE", "MILD", "MODERATE"),
levels = c("MILD", "MODERATE", "SEVERE"),
ordered = TRUE)
symptoms <- factor(c("SEVERE", "MILD", "MODERATE"),
levels = c("MILD", "MODERATE", "SEVERE"),
ordered = TRUE)
symptoms
symptoms > "MODERATE"
subject_name[1]
subject_name[1]
temperature[1]
subject_name[1]
temperature[1]
flu_status[1]
gender[1]
blood[1]
symptoms[1]
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1],
symptoms = symptoms[1])
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1],
symptoms = symptoms[1])
subject1
subject1[2]
subject1[[2]]
subject1$temperature
subject1$temperature
subject1[c("temperature", "flu_status")]
pt_data <- data.frame(subject_name, temperature,
flu_status, gender, blood, symptoms,
stringsAsFactors = FALSE)
pt_data <- data.frame(subject_name, temperature,
flu_status, gender, blood, symptoms,
stringsAsFactors = FALSE)
pt_data
pt_data <- data.frame(subject_name, temperature,
flu_status, gender, blood, symptoms,
stringsAsFactors = FALSE)
pt_data
pt_data$subject_name
pt_data$subject_name
> pt_data[c("temperature", "flu_status")]
pt_data[c("temperature", "flu_status")]
pt_data[1,2]
pt_data[c(1, 3), c(2, 4)]
pt_data[c(1, 3), c(2, 4)]
pt_data[, 1]
pt_data[1, ]
pt_data[ , ]
pt_data[c(1, 3), c("temperature", "gender")]
pt_data[-2, c(-1, -3, -5, -6)]
pt_data$temp_c <- (pt_data$temperature - 32) * (5 / 9)
pt_data$temp_c <- (pt_data$temperature - 32) * (5 / 9)
pt_data$temp_c
pt_data[c("temperature", "temp_c")]
m <- matrix(c(1, 2, 3, 4), nrow = 2)
m <- matrix(c(1, 2, 3, 4), nrow = 2)
m
m <- matrix(c(1, 2, 3, 4), ncol = 2)
m
m <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)
m
m <- matrix(c(1, 2, 3, 4, 5, 6), ncol = 2)
m
m[1, ]
m[, 1]
x <- c(TRUE,TRUE,FALSE)
y <- c(1,2,3)
z <- c("James", "Holt", "May")
save(x, y, z, file = "mydata.RData")
x <- c(TRUE,TRUE,FALSE)
y <- c(1,2,3)
z <- c("James", "Holt", "May")
save(x, y, z, file = "mydata.RData")
load("mydata.RData")
x <- c(TRUE,TRUE,FALSE)
y <- c(1,2,3)
z <- c("James", "Holt", "May")
save(x, y, z, file = "mydata.RData")
load("mydata.RData")
load("mydata.RData")
x
y
z
save.image()
save.image()
load(".RData")
ls()
rm(m, subject1)
rm(m, subject1)
m
rm(m, subject1)
m
rm(list = ls())
rm(list = ls())
ls()
knitr::opts_chunk$set(echo = TRUE)
typeof(v)
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender
blood <- factor(c("O", "AB", "A"), levels = c("A", "B", "AB", "O"))
blood
symptoms <- factor(c("SEVERE", "MILD", "MODERATE"),
levels = c("MILD", "MODERATE", "SEVERE"),
ordered = TRUE)
symptoms
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1],
symptoms = symptoms[1])
subject1
pt_data <- data.frame(subject_name, temperature,
flu_status, gender, blood, symptoms,
stringsAsFactors = FALSE)
pt_data
write.csv(pt_data, file="pt_data.csv", row.names= FALSE)
write.csv(pt_data, file="pt_data.csv", row.names= FALSE)
pt_data <- read.csv("pt_data.csv", stringsAsFactors = FALSE)
write.csv(pt_data, file="pt_data.csv", row.names= FALSE)
pt_data <- read.csv("pt_data.csv", stringsAsFactors = FALSE)
pt_data
pt_data <- read.csv("pt_data.csv", stringsAsFactors = FALSE)
pt_data
pt_data <- read.csv("pt_data.csv", stringsAsFactors = FALSE)
pt_data
pt_data <- read.csv("pt_data.csv", stringsAsFactors = FALSE)
pt_data
pt_data
write.csv(pt_data, file = "pt_data.csv", row.names = FALSE)
write.csv(pt_data, file = "pt_data.csv", row.names = FALSE)
write.csv(pt_data, file = "pt_data.csv", row.names = FALSE)
usedcars <- read.csv("usedcars.csv", stringsAsFactors = FALSE)
usedcars <- read.csv("usedcars.csv", stringsAsFactors = FALSE)
str(usedcars)
summary(usedcars$year)
summary(usedcars[c("price", "mileage")])
(36000 + 44000 + 56000) / 3
mean(c(36000, 44000, 56000))
median(c(36000, 44000, 56000))
median(c(36000, 44000, 56000))
range(usedcars$price)
diff(range(usedcars$price))
IQR(usedcars$price)
quantile(usedcars$price)
quantile(usedcars$price, probs = c(0.01, 0.99))
quantile(usedcars$price, seq(from = 0, to = 1, by = 0.20))
boxplot(usedcars$price, main = "Boxplot of Used Car Prices", ylab = "Price ($)")
boxplot(usedcars$mileage, main = "Boxplot of Used Car Mileage", ylab = "Odometer (mi.)")
hist(usedcars$price, main = "Histogram of Used Car Prices", xlab = "Price ($)")
hist(usedcars$mileage, main = "Histogram of Used Car Mileage", xlab = "Odometer (mi.)")
var(usedcars$price)
sd(usedcars$price)
var(usedcars$mileage)
sd(usedcars$mileage)
table(usedcars$year)
table(usedcars$model)
table(usedcars$color)
model_table <- table(usedcars$model)
prop.table(model_table)
color_table <- table(usedcars$color)
color_pct <- prop.table(color_table) * 100
round(color_pct, digits = 1)
plot(x = usedcars$mileage, y = usedcars$price,
main = "Scatterplot of Price vs. Mileage",
xlab = "Used Car Odometer (mi.)",
ylab = "Used Car Price ($)")
install.packages("gmodels")
library(gmodels)
usedcars$conservative <-usedcars$color %in% c("Black", "Gray", "Silver", "White")
View(usedcars)
table(usedcars$conservative)
CrossTable(x = usedcars$model, y = usedcars$conservative)
CrossTable(x = usedcars$model, y = usedcars$conservative, chisq = TRUE)
v <- "$"
cnt <- 2
while (cnt < 7) {
print(v)
cnt = cnt + 3
}
value = 10
while (value > 0) {
value = as.integer(value / 2)
}
value = 10
value = 10
while (value > 0) {
value = as.integer(value / 2)
value
}
value = 10
while(value>0){
value = as.integer(value/2)
value
}
value = 10
if (value <0 || value >10) {
status = "fail"
} else {
status = "pass"
}
barplot(c(40, 60,50), names.arg = (c('A','B', 'C')), col = (c('red','blue','green')) )
fr = data.frame(response, predictor)
fr = data.frame("response", "predictor")
View(fr)
factorial(5)
for (i in 1:100) {
message(i)
}
species = c('Bbird', 'C.Finch', 'Gt.Tit', 'Sparrow', 'Robin', 'Thrush')
length(species)
?plot
dat1 = c(12,34,5,20)
dat2 = 1:5
dat3 = dat1+dat2
sample(c(1,12,34,12,40),10,T)
?read
?scan
mylist = list(name = m1, position = X)
mylist = list(name = "m1", position = "X")
mylist
mylist$position
x = 1:10[1] 1 2 3 4 5 6 7 8 9 10
x = 1:10
x[-1:5]
x[-c(1:5)]
x[-1:-5]
rm(list=ls())
M = matrix(1:10,2,5)
m
M
M[2,3] <- 100
M
v <- "Hello"
cnt <- 2
while (cnt < 7) {
print(v)
cnt = cnt + 1
}
data = 5:12
length(data)
laptop = c('Acer', 'Dell', 'Mac', 'HP')
length(laptop)
values = 55:47
for (i in values) {
print(i)
}
values = seq(25,50,4)
values
m1 = matrix(1:10, 2,5)
m2 =matrix(11:20, 5,2)
m = m1+m2
m
v <- "$"
cnt <- 2
while (cnt < 7) {
print(v)
cnt = cnt + 3
}
value <- rep(5,3)
value
barplot(c(40, 60,50), names.arg = (c('A','B', 'C')), col = (c('red','blue','green')) )
count = 0
while (count > 0) {
count = count + 1
print(count)
}
3 + 9 + 12 -7
?tapply
?detach
library("ggplot2")
?ggplot
detach("ggplot2")
detach(ggplot2)
?detach
detach("package:ggplot2", unload = TRUE)
?matrix
value1 = c(3, 6, 23)
value1 < 6
mydata = data.frame(PlotID = c("1_A","1_A","1_B","2_A","2_A"),
Species = c("GF","WS","F","GF","GF var. Bupkiss"),
Dim =c("18.8","NA","20.0","25.8","24"))
nrow(mydata)
?scan
?sort
?order
fileURL <- "http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data"
download.file(fileURL, destfile="breast-cancer-wisconsin.data", method="curl")
df <- read.table("breast-cancer-wisconsin.data", na.strings = "?", sep=",")
View(df)
str(df)
df <- df[ , -1]
ds <- df
names(ds) <- c("ClumpThickness",
"UniformityCellSize",
"UniformityCellShape",
"MarginalAdhesion",
"SingleEpithelialCellSize",
"BareNuclei",
"BlandChromatin",
"NormalNucleoli",
"Mitoses",
"Class")
View(ds)
summary(ds)
table(ds$Class)
prop.table(table(ds$Class))
barplot(table(ds$Class),
xlab="Class (2 = Benign, 4 = Malignant)", ylab="Count", col=c("darkblue","red"),
legend = levels(ds$Class), beside=TRUE)
corrTable <- cor(df[,c("V2","V3","V4","V5","V6","V7","V8","V9","V10")])
corrTable
library('DataExplorer')
plot_correlation(ds,'continuous', cor_args = list("use" = "pairwise.complete.obs"))
plot_density(ds)
plot_missing(ds)
sum (is.na(ds))
colSums(sapply(ds,is.na))
ds$BareNuclei <- ifelse(is.na(ds$BareNuclei),
ave(ds$BareNuclei, FUN = function(x) mean(x, na.rm = TRUE)),
ds$BareNuclei)
plot_missing(ds)
library('dplyr')
ds$Class <- factor(ds$Class, levels=c(2,4), labels=c("1", "2"))
str(ds)
set.seed(1234)
ind <- sample(2, nrow(ds), replace=TRUE, prob=c(0.7, 0.3))
train_ds <- ds[ind==1,]
validation_ds <- ds[ind==2,]
?sample
View(train_ds)
View(validation_ds)
ind
prop.table(table(train_ds$Class))
prop.table(table(validation_ds$Class))
set.seed(45)
ind <- sample(2, nrow(ds), replace=TRUE, prob=c(0.7, 0.3))
train_ds <- ds[ind==1,]
validation_ds <- ds[ind==2,]
prop.table(table(train_ds$Class))
prop.table(table(validation_ds$Class))
install.packages("naivebayes")
library(naivebayes)
Naive_Bayes_basic = naive_bayes(x = train_ds[ , -10], #remove column 10 which is dependent variable
y = train_ds$Class , laplace = 0 )
View(Naive_Bayes_basic)
y_pred_train_raw = predict (Naive_Bayes_basic, newdata = train_ds[ ,-10], type = "prob" )
y_pred_train_raw
y_pred_train_class = predict (Naive_Bayes_basic, newdata = train_ds[ ,-10], type = "class" )
y_pred_train_class
s = cbind(y_pred_train_raw, y_pred_train_class)
s
# Creating Confusion Matrix
cm = table(train_ds$Class, y_pred_train_class)
cm
summary(Naive_Bayes_basic)
table(train_ds)
summary(Naive_Bayes_basic)
accuracy_Naive_Bayes_basic_train = sum(diag(cm))/sum(cm)
accuracy_Naive_Bayes_basic_train
y_pred_validation_class = predict (Naive_Bayes_basic, newdata = validation_ds[ ,-10], type = "class" )
cm_Naive_Bayes_basic_validation = table(validation_ds$Class, y_pred_validation_class)
cm_Naive_Bayes_basic_validation
accuracy_Naive_Bayes_basic_validation = sum(diag(cm_Naive_Bayes_basic_validation))/sum(cm_Naive_Bayes_basic_validation)
accuracy_Naive_Bayes_basic_validation
Reading data into R
data <- read.csv("final_dataset.csv")
setwd("~/Desktop/MSc Data Science and Business Analytics/Sem 2/CP1/data/Malay")
data <- read.csv("convertcsv.csv")
data1 <- read.csv("convertcsv (1).csv")
data2 <- read.csv("convertcsv (2).csv")
data3 <- read.csv("convertcsv (3).csv")
data4 <- read.csv("convertcsv (4).csv")
data5 <- read.csv("convertcsv (5).csv")
data6 <- read.csv("convertcsv (6).csv")
data7 <- read.csv("convertcsv (7).csv")
fulldata <- do.call("rbind", list(data, data1, data2, data3, data4, data5, data6, data7))
fulldata %>%
mutate(HS = ifelse(X1.0 == 0 & X1.1 == 0 & X1.2 == 0 & X1.3 ==0 & X1.4 == 0 & X1.5 == 0, 0, 1)) -> fulldata
library('dplyr')
fulldata %>%
mutate(HS = ifelse(X1.0 == 0 & X1.1 == 0 & X1.2 == 0 & X1.3 ==0 & X1.4 == 0 & X1.5 == 0, 0, 1)) -> fulldata
fulldata%>%
group_by(fulldata$HS)%>%
summarise(count = n(), percentage = round(n()/nrow(fulldata)*100, 2))%>%
arrange(desc(count)) -> Distr
Distr
